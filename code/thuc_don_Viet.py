import json
import requests
def goi_ollama_de_lay_cong_thuc(ten_mon, model='gemma2', max_retries=3, delay=2):
    """G·ªçi Ollama API ƒë·ªÉ l·∫•y c√¥ng th·ª©c m√≥n ƒÉn v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i."""
    prompt = f"H√£y vi·∫øt c√°ch l√†m chi ti·∫øt v√† nguy√™n li·ªáu cho m√≥n ƒÉn: {ten_mon}."
    
    for attempt in range(max_retries):
        try:
            response = requests.post(
                "http://localhost:11434/api/generate",
                json={"model": model, "prompt": prompt, "stream": False},
                timeout=30
            )
            if response.ok:
                return response.json()["response"].strip()
            else:
                print(f"L·ªói k·∫øt n·ªëi l·∫ßn {attempt + 1}/{max_retries}: Status code {response.status_code}")
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi l·∫ßn {attempt + 1}/{max_retries}: {str(e)}")
        
        if attempt < max_retries - 1:
            print(f"Th·ª≠ l·∫°i sau {delay} gi√¢y...")
            import time
            time.sleep(delay)
    
    return "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi m√¥ h√¨nh Ollama sau nhi·ªÅu l·∫ßn th·ª≠. Vui l√≤ng ki·ªÉm tra l·∫°i."

# H√†m ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ file JSON
def doc_du_lieu_json(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        print("File kh√¥ng t·ªìn t·∫°i.")
        return {}
    except json.JSONDecodeError:
        print("L·ªói khi gi·∫£i m√£ JSON.")
        return {}

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file thuc_don.json
mon_an_data = doc_du_lieu_json('thuc_don.json')

def goi_y_mon_an(danh_sach_nguyen_lieu):
    ket_qua = []
    for ten_mon, thong_tin in mon_an_data.items():
        # Gh√©p t·∫•t c·∫£ nguy√™n li·ªáu c·ªßa m√≥n ƒÉn th√†nh 1 chu·ªói ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        nguyen_lieu_mot_mon = " ".join(thong_tin.get('nguyen_lieu', [])).lower()

        # Ki·ªÉm tra xem t·ª´ng nguy√™n li·ªáu ng∆∞·ªùi d√πng nh·∫≠p c√≥ xu·∫•t hi·ªán trong chu·ªói tr√™n kh√¥ng
        if all(nl.lower() in nguyen_lieu_mot_mon for nl in danh_sach_nguyen_lieu):
            ket_qua.append(f"üëâ {ten_mon.title()} \n ")

    if ket_qua:
        return "üçΩ B·∫°n c√≥ th·ªÉ n·∫•u:\n" + "\n".join(ket_qua)
    else:
        return "‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ph√π h·ª£p v·ªõi nguy√™n li·ªáu b·∫°n ƒë∆∞a ra."


def lay_cong_thuc_mon_an(ten_mon):
    # Kh·ªüi t·∫°o bi·∫øn v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
    nguyen_lieu = "Kh√¥ng c√≥ th√¥ng tin"
    cach_lam = "Kh√¥ng c√≥ th√¥ng tin"
    
    ten_mon = ten_mon.lower()
    
    try:
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file cong_thuc.json
        with open('cong_thuc.json', 'r', encoding='utf-8') as file:
            cong_thuc = json.load(file)
        
        # T√¨m c√¥ng th·ª©c ph√π h·ª£p
        for mon, thong_tin in cong_thuc.items():
            if ten_mon in mon.lower():
                if isinstance(thong_tin["nguyen_lieu"], list):
                    nguyen_lieu = "\n- " + "\n- ".join(thong_tin["nguyen_lieu"])
                else:
                    nguyen_lieu = thong_tin.get("nguyen_lieu", "Kh√¥ng c√≥ th√¥ng tin nguy√™n li·ªáu")
                
                cach_lam = thong_tin.get("cach_lam", "Kh√¥ng c√≥ h∆∞·ªõng d·∫´n c√°ch l√†m")
                break
    except (FileNotFoundError, json.JSONDecodeError) as e:
        # Th·ª≠ t√¨m file trong th∆∞ m·ª•c code/
        try:
            with open('code/cong_thuc.json', 'r', encoding='utf-8') as file:
                cong_thuc = json.load(file)
            
            for mon, thong_tin in cong_thuc.items():
                if ten_mon in mon.lower():
                    if isinstance(thong_tin["nguyen_lieu"], list):
                        nguyen_lieu = "\n- " + "\n- ".join(thong_tin["nguyen_lieu"])
                    else:
                        nguyen_lieu = thong_tin.get("nguyen_lieu", "Kh√¥ng c√≥ th√¥ng tin nguy√™n li·ªáu")
                    
                    cach_lam = thong_tin.get("cach_lam", "Kh√¥ng c√≥ h∆∞·ªõng d·∫´n c√°ch l√†m")
                    break
        except (FileNotFoundError, json.JSONDecodeError) as e2:
            print(f"L·ªói khi ƒë·ªçc file c√¥ng th·ª©c: {e2}")
    
    # Tr·∫£ v·ªÅ k·∫øt qu·∫£, d√π c√≥ t√¨m th·∫•y c√¥ng th·ª©c hay kh√¥ng
    return (f"üç≤ C√¥ng th·ª©c m√≥n {ten_mon.title()}:\n\n"
            f"üìù Nguy√™n li·ªáu: {nguyen_lieu}\n\n"
            f"üë®‚Äçüç≥ C√°ch l√†m: {cach_lam}")