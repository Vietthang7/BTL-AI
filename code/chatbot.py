import asyncio
import requests
from thuc_don_Viet import goi_y_mon_an, lay_cong_thuc_mon_an
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from kiem_tra_the_trang import parse_user_input, xu_ly_chi_so, xu_ly_muc_tieu_can_nang
from xay_dung_thuc_don import tao_thuc_don_tang_can_trong_ngay, tao_thuc_don_giam_can_trong_ngay, \
    tao_thuc_don_tang_can_7_ngay, tao_thuc_don_giam_can_7_ngay, xu_ly_mon_khong_thich, khoi_phuc_mon_an_lai, \
    hien_thi_danh_sach_mon_khong_thich
import json

# Import c√°c module AI m·ªõi
from ai_modules import MessageClassifier, FoodRecommender

# Kh·ªüi t·∫°o m√¥ h√¨nh AI
message_classifier = MessageClassifier()
food_recommender = FoodRecommender()

# H√†m g·ªçi Ollama model Local (Gemma2)
def hoi_ollama(prompt):
    try:
        response = requests.post(
            "http://localhost:11434/api/generate",
            json={
                "model": "gemma2",
                "prompt": prompt,
                "stream": False
            }
        )
        data = response.json()
        return data.get("response", "ü§ñ Kh√¥ng c√≥ ph·∫£n h·ªìi.")
    except Exception as e:
        return f"‚ùå L·ªói khi g·ªçi Ollama: {e}"


# L·ªánh /start
async def bat_dau(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['history'] = []  # Reset l·ªãch s·ª≠ khi b·∫Øt ƒë·∫ßu
    
    # T·∫£i c√°c m√¥ h√¨nh AI n·∫øu ch∆∞a t·∫£i
    if not message_classifier.is_trained:
        message_classifier.load()
    if not food_recommender.is_trained:
        food_recommender.load()
    
    await update.message.reply_text(
        "üë®‚Äçüç≥ Xin ch√†o! T√¥i l√† chatbot dinh d∆∞·ª°ng ƒë∆∞·ª£c n√¢ng c·∫•p v·ªõi tr√≠ tu·ªá nh√¢n t·∫°o.\n\n"
        "T√¥i c√≥ th·ªÉ:\n"
        "- G·ª£i √Ω m√≥n ƒÉn t·ª´ nguy√™n li·ªáu\n"
        "- T√¨m c√¥ng th·ª©c n·∫•u ƒÉn\n"
        "- T·∫°o th·ª±c ƒë∆°n tƒÉng/gi·∫£m c√¢n\n"
        "- T√≠nh ch·ªâ s·ªë BMI v√† t∆∞ v·∫•n s·ª©c kh·ªèe\n"
        "- G·ª£i √Ω m√≥n ƒÉn t∆∞∆°ng t·ª± m√≥n b·∫°n th√≠ch\n\n"
        "H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn gi√∫p g√¨ nh√©!"
    )

def doc_du_lieu_json(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        print("File kh√¥ng t·ªìn t·∫°i.")
        return {}
    except json.JSONDecodeError:
        print("L·ªói khi gi·∫£i m√£ JSON.")
        return {}


mon_an_tang_can = doc_du_lieu_json('thuc_don_tang_can.json')
mon_an_giam_can = doc_du_lieu_json('thuc_don_giam_can.json')


# Tr·∫£ l·ªùi m·ªçi tin nh·∫Øn m√† ng∆∞·ªùi d√πng g·ª≠i
async def tra_loi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    
    # --- PH·∫¶N M·ªöI: S·ª≠ d·ª•ng Naive Bayes ƒë·ªÉ ph√¢n lo·∫°i tin nh·∫Øn ---
    if message_classifier.is_trained:
        intent = message_classifier.predict(user_message)
    else:
        # N·∫øu m√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán, d√πng logic c≈©
        intent = "unknown"
    
    # X·ª≠ l√Ω d·ª±a tr√™n ph√¢n lo·∫°i tin nh·∫Øn
    if intent == "goi_y_mon":
        # C·∫£i ti·∫øn ch·ª©c nƒÉng g·ª£i √Ω m√≥n ƒÉn v·ªõi k-NN
        if "g·ª£i √Ω m√≥n" in user_message:
            # Gi·ªØ logic c≈© nh∆∞ng b·ªï sung k·∫øt qu·∫£ t·ª´ k-NN
            nguyen_lieu = user_message.replace("g·ª£i √Ω m√≥n", "").strip().split(",")
            nguyen_lieu = [nl.strip() for nl in nguyen_lieu if nl.strip()]
            
            # Logic c≈©
            ai_reply = goi_y_mon_an(nguyen_lieu)
            
            # B·ªï sung k·∫øt qu·∫£ t·ª´ m√¥ h√¨nh k-NN
            if food_recommender.is_trained:
                knn_suggestions = food_recommender.recommend_from_ingredients(nguyen_lieu, n=3)
                if knn_suggestions:
                    ai_reply += "\n\nü§ñ G·ª£i √Ω th√™m t·ª´ AI:\n"
                    for i, food in enumerate(knn_suggestions, 1):
                        ai_reply += f"{i}. {food.title()}\n"
            
            await update.message.reply_text(ai_reply)
            return
    
    elif intent == "cong_thuc":
        if "c√°ch l√†m m√≥n" in user_message:
            ten_mon = user_message.replace("c√°ch l√†m m√≥n", "").strip()
            ai_reply = lay_cong_thuc_mon_an(ten_mon)
            
            # --- PH·∫¶N M·ªöI: G·ª£i √Ω m√≥n t∆∞∆°ng t·ª± ---
            if food_recommender.is_trained:
                similar_foods = food_recommender.recommend_similar(ten_mon, n=2)
                if similar_foods:
                    ai_reply += "\n\nüëâ B·∫°n c≈©ng c√≥ th·ªÉ th√≠ch:\n"
                    for similar in similar_foods:
                        ai_reply += f"- {similar.title()}\n"
            
            await update.message.reply_text(ai_reply)
            return
    
    # Gi·ªØ l·∫°i logic x·ª≠ l√Ω c≈© cho c√°c intent kh√°c
    if "t√≠nh ch·ªâ s·ªë" in user_message or intent == "chi_so_suc_khoe":
        thong_tin = parse_user_input(user_message)
        await xu_ly_chi_so(thong_tin, update, context)
        return

    if "mu·ªën gi·∫£m c√¢n" in user_message or (intent == "tang_giam_can" and "gi·∫£m" in user_message):
        await xu_ly_muc_tieu_can_nang("giam_can", context, update)
        return

    elif "mu·ªën tƒÉng c√¢n" in user_message or (intent == "tang_giam_can" and "tƒÉng" in user_message):
        await xu_ly_muc_tieu_can_nang("tang_can", context, update)
        return

    if "th·ª±c ƒë∆°n gi·∫£m c√¢n trong ng√†y" in user_message or (intent == "thuc_don" and "gi·∫£m" in user_message and "ng√†y" in user_message):
        context.user_data["che_do"] = "giam_can"
        context.user_data["loai_thuc_don"] = "trong_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_giam_can_trong_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    elif "th·ª±c ƒë∆°n gi·∫£m c√¢n trong 7 ng√†y" in user_message or (intent == "thuc_don" and "gi·∫£m" in user_message and "7" in user_message):
        context.user_data["che_do"] = "giam_can"
        context.user_data["loai_thuc_don"] = "7_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_giam_can_7_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    elif "th·ª±c ƒë∆°n tƒÉng c√¢n trong ng√†y" in user_message or (intent == "thuc_don" and "tƒÉng" in user_message and "ng√†y" in user_message):
        context.user_data["che_do"] = "tang_can"
        context.user_data["loai_thuc_don"] = "trong_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_tang_can_trong_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    elif "th·ª±c ƒë∆°n tƒÉng c√¢n trong 7 ng√†y" in user_message or (intent == "thuc_don" and "tƒÉng" in user_message and "7" in user_message):
        context.user_data["che_do"] = "tang_can"
        context.user_data["loai_thuc_don"] = "7_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_tang_can_7_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    if "kh√¥ng mu·ªën ƒÉn" in user_message or (intent == "thiet_lap" and ("kh√¥ng" in user_message and "ƒÉn" in user_message)):
        await xu_ly_mon_khong_thich(user_message, context, update,
                                    mon_an_giam_can, mon_an_tang_can)
        return

    if "mu·ªën ƒÉn l·∫°i" in user_message or (intent == "thiet_lap" and "l·∫°i" in user_message):
        await khoi_phuc_mon_an_lai(user_message, context, update.message.reply_text)
        return

    if "danh s√°ch m√≥n kh√¥ng th√≠ch" in user_message or (intent == "thiet_lap" and "danh s√°ch" in user_message):
        await hien_thi_danh_sach_mon_khong_thich(context, update.message.reply_text)
        return
        
    # --- PH·∫¶N M·ªöI: Ch·ª©c nƒÉng g·ª£i √Ω m√≥n t∆∞∆°ng t·ª± ---
    if "m√≥n t∆∞∆°ng t·ª±" in user_message and food_recommender.is_trained:
        try:
            ten_mon = user_message.replace("m√≥n t∆∞∆°ng t·ª±", "").strip()
            similar_foods = food_recommender.recommend_similar(ten_mon, n=5)
            
            if similar_foods:
                reply = f"üç≤ M√≥n ƒÉn t∆∞∆°ng t·ª± v·ªõi {ten_mon}:\n\n"
                for i, food in enumerate(similar_foods, 1):
                    reply += f"{i}. {food.title()}\n"
                await update.message.reply_text(reply)
            else:
                await update.message.reply_text(f"‚ùå Kh√¥ng t√¨m th·∫•y m√≥n t∆∞∆°ng t·ª± v·ªõi {ten_mon}.")
            return
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi t√¨m m√≥n t∆∞∆°ng t·ª±: {str(e)}")
            return

    # D√πng Ollama cho c√°c tr∆∞·ªùng h·ª£p kh√°c
    context.user_data.setdefault('history', [])
    context.user_data['history'].append(user_message)
    recent_history = context.user_data['history'][-5:]
    prompt = "\n".join(recent_history)
    ai_reply = await asyncio.to_thread(hoi_ollama, prompt)
    await update.message.reply_text(ai_reply)

# Th√™m l·ªánh hu·∫•n luy·ªán m√¥ h√¨nh
async def huan_luyen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """L·ªánh ƒë·ªÉ hu·∫•n luy·ªán l·∫°i c√°c m√¥ h√¨nh AI"""
    await update.message.reply_text("üîÑ ƒêang hu·∫•n luy·ªán l·∫°i c√°c m√¥ h√¨nh AI...")
    
    try:
        # Import train_models v√† ch·∫°y hu·∫•n luy·ªán
        from train_models import train_message_classifier, train_food_recommender
        
        # Ch·∫°y hu·∫•n luy·ªán b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng ch·∫∑n bot
        await asyncio.to_thread(train_message_classifier)
        await asyncio.to_thread(train_food_recommender)
        
        # T·∫£i l·∫°i c√°c m√¥ h√¨nh
        message_classifier.load()
        food_recommender.load()
        
        await update.message.reply_text("‚úÖ Hu·∫•n luy·ªán th√†nh c√¥ng! C√°c m√¥ h√¨nh AI ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh: {str(e)}")

# Token t·ª´ BotFather
TOKEN = '7433569751:AAGPj8iRnKUiHi6Z5f6FNyyOhRyxqk3DbZc'
#TOKEN = '7964158551:AAEN2Z9m6KNpK7DCQmVZtRPgbmVdGYQUt-I'

# Kh·ªüi t·∫°o bot v√† ch·∫°y
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    
    # T·∫£i c√°c m√¥ h√¨nh AI n·∫øu c√≥
    try:
        message_classifier.load()
        print("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh ph√¢n lo·∫°i tin nh·∫Øn")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ph√¢n lo·∫°i tin nh·∫Øn: {e}")
    
    try:
        food_recommender.load()
        print("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh g·ª£i √Ω m√≥n ƒÉn")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh g·ª£i √Ω m√≥n ƒÉn: {e}")
    
    # Th√™m handlers
    app.add_handler(CommandHandler("start", bat_dau))
    app.add_handler(CommandHandler("huanluyen", huan_luyen))  # Th√™m l·ªánh hu·∫•n luy·ªán
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), tra_loi))
    
    print("ü§ñ Bot ƒëang ch·∫°y v·ªõi c√°c m√¥ h√¨nh AI...")
    app.run_polling()