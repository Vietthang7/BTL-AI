import asyncio
import requests
from thuc_don_Viet import goi_y_mon_an, lay_cong_thuc_mon_an
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from kiem_tra_the_trang import parse_user_input, xu_ly_chi_so, xu_ly_muc_tieu_can_nang
from xay_dung_thuc_don import tao_thuc_don_tang_can_trong_ngay, tao_thuc_don_giam_can_trong_ngay, \
    tao_thuc_don_tang_can_7_ngay, tao_thuc_don_giam_can_7_ngay, xu_ly_mon_khong_thich, khoi_phuc_mon_an_lai, \
    hien_thi_danh_sach_mon_khong_thich
import json
import os
# Import c√°c module AI m·ªõi
from ai_modules import MessageClassifier, FoodRecommender

# Kh·ªüi t·∫°o m√¥ h√¨nh AI
message_classifier = MessageClassifier()
food_recommender = FoodRecommender()

# H√†m g·ªçi Ollama model Local (Gemma2)
async def hoi_ollama(prompt, model='gemma2', max_retries=3, delay=2):
    print("DEBUG: Calling Ollama")
    
    for attempt in range(max_retries):
        try:
            # S·ª≠ d·ª•ng asyncio.to_thread ƒë·ªÉ kh√¥ng ch·∫∑n lu·ªìng ch√≠nh
            def make_request():
                return requests.post(
                    "http://localhost:11434/api/generate",
                    json={"model": model, "prompt": prompt, "stream": False},
                    timeout=30
                )
                
            response = await asyncio.to_thread(make_request)
            
            if response.ok:
                data = response.json()
                return data.get("response", "ü§ñ Kh√¥ng c√≥ ph·∫£n h·ªìi.")
            else:
                print(f"L·ªói k·∫øt n·ªëi Ollama l·∫ßn {attempt + 1}/{max_retries}: Status code {response.status_code}")
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi Ollama l·∫ßn {attempt + 1}/{max_retries}: {str(e)}")
        
        if attempt < max_retries - 1:
            print(f"Th·ª≠ l·∫°i sau {delay} gi√¢y...")
            await asyncio.sleep(delay)
    
    return f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Ollama sau {max_retries} l·∫ßn th·ª≠."


# L·ªánh /start
async def bat_dau(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['history'] = []  # Reset l·ªãch s·ª≠ khi b·∫Øt ƒë·∫ßu
    
    # T·∫£i c√°c m√¥ h√¨nh AI n·∫øu ch∆∞a t·∫£i
    if not message_classifier.is_trained:
        message_classifier.load()
    if not food_recommender.is_trained:
        food_recommender.load()
    
    await update.message.reply_text(
        "üë®‚Äçüç≥ Xin ch√†o! T√¥i l√† chatbot dinh d∆∞·ª°ng ƒë∆∞·ª£c n√¢ng c·∫•p v·ªõi tr√≠ tu·ªá nh√¢n t·∫°o.\n\n"
        "T√¥i c√≥ th·ªÉ:\n"
        "- G·ª£i √Ω m√≥n ƒÉn t·ª´ nguy√™n li·ªáu\n"
        "- T√¨m c√¥ng th·ª©c n·∫•u ƒÉn\n"
        "- T·∫°o th·ª±c ƒë∆°n tƒÉng/gi·∫£m c√¢n\n"
        "- T√≠nh ch·ªâ s·ªë BMI v√† t∆∞ v·∫•n s·ª©c kh·ªèe\n"
        "- G·ª£i √Ω m√≥n ƒÉn t∆∞∆°ng t·ª± m√≥n b·∫°n th√≠ch\n\n"
        "H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn gi√∫p g√¨ nh√©!"
    )

def doc_du_lieu_json(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        print("File kh√¥ng t·ªìn t·∫°i.")
        return {}
    except json.JSONDecodeError:
        print("L·ªói khi gi·∫£i m√£ JSON.")
        return {}


mon_an_tang_can = doc_du_lieu_json('thuc_don_tang_can.json')
mon_an_giam_can = doc_du_lieu_json('thuc_don_giam_can.json')


# Tr·∫£ l·ªùi m·ªçi tin nh·∫Øn m√† ng∆∞·ªùi d√πng g·ª≠i
async def tra_loi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.lower()
    
    # --- PH·∫¶N M·ªöI: S·ª≠ d·ª•ng Naive Bayes ƒë·ªÉ ph√¢n lo·∫°i tin nh·∫Øn ---
    if message_classifier.is_trained:
        intent = message_classifier.predict(user_message)
    else:
        # N·∫øu m√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán, d√πng logic c≈©
        intent = "unknown"
    
    # X·ª≠ l√Ω d·ª±a tr√™n ph√¢n lo·∫°i tin nh·∫Øn
    if intent == "goi_y_mon":
        # Tr√≠ch xu·∫•t nguy√™n li·ªáu t·ª´ tin nh·∫Øn
        nguyen_lieu_str = user_message.replace("g·ª£i √Ω m√≥n", "").replace("t·ª´", "").replace("v·ªõi", "").strip()
        
        # T√°ch nguy√™n li·ªáu b·∫±ng nhi·ªÅu c√°ch
        nguyen_lieu = []
        if "," in nguyen_lieu_str:
            nguyen_lieu = [nl.strip() for nl in nguyen_lieu_str.split(',') if nl.strip()]
        elif "v√†" in nguyen_lieu_str:
            nguyen_lieu = [nl.strip() for nl in nguyen_lieu_str.split('v√†') if nl.strip()]
        else:
            # N·∫øu kh√¥ng c√≥ d·∫•u ph√¢n c√°ch, coi nh∆∞ m·ªôt nguy√™n li·ªáu
            nguyen_lieu = [nguyen_lieu_str]
        
        if nguyen_lieu:
            # In ra debug
            print(f"DEBUG: Nguy√™n li·ªáu ƒë∆∞·ª£c t√¨m: {nguyen_lieu}")
            
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file thuc_don.json
            try:
                with open('thuc_don.json', 'r', encoding='utf-8') as f:
                    thuc_don = json.load(f)
                    print(f"DEBUG: ƒê·ªçc th√†nh c√¥ng thuc_don.json v·ªõi {len(thuc_don)} m√≥n")
            except FileNotFoundError:
                try:
                    with open('code/thuc_don.json', 'r', encoding='utf-8') as f:
                        thuc_don = json.load(f)
                        print(f"DEBUG: ƒê·ªçc th√†nh c√¥ng code/thuc_don.json v·ªõi {len(thuc_don)} m√≥n")
                except FileNotFoundError:
                    await update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y file th·ª±c ƒë∆°n.")
                    return
            
            # T√¨m m√≥n ph√π h·ª£p - C·∫¢I TI·∫æN: T√¨m linh ho·∫°t h∆°n
            mon_an_phu_hop = []
            
            for ten_mon, chi_tiet in thuc_don.items():
                nguyen_lieu_mon = " ".join(str(item).lower() for item in chi_tiet.get('nguyen_lieu', []))
                
                # C·∫£i ti·∫øn: Thay v√¨ ki·ªÉm tra ch√≠nh x√°c, ki·ªÉm tra m·ªôt ph·∫ßn
                matches = 0
                for nl in nguyen_lieu:
                    nl_lower = nl.lower()
                    # Ki·ªÉm tra xem nguy√™n li·ªáu c√≥ trong danh s√°ch kh√¥ng
                    if any(nl_lower in str(ing).lower() for ing in chi_tiet.get('nguyen_lieu', [])):
                        matches += 1
                
                # N·∫øu t√¨m th·∫•y t·∫•t c·∫£ nguy√™n li·ªáu th√¨ th√™m v√†o k·∫øt qu·∫£
                if matches == len(nguyen_lieu):
                    mon_an_phu_hop.append(f"üëâ {ten_mon.title()}")
            
            if mon_an_phu_hop:
                ai_reply = "üçΩ B·∫°n c√≥ th·ªÉ n·∫•u:\n" + "\n".join(mon_an_phu_hop)
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y m√≥n ph√π h·ª£p, th·ª≠ t√¨m m√≥n c√≥ √≠t nh·∫•t m·ªôt nguy√™n li·ªáu
                mon_mot_phan = []
                for ten_mon, chi_tiet in thuc_don.items():
                    nguyen_lieu_mon = " ".join(str(item).lower() for item in chi_tiet.get('nguyen_lieu', []))
                    
                    for nl in nguyen_lieu:
                        nl_lower = nl.lower()
                        if any(nl_lower in str(ing).lower() for ing in chi_tiet.get('nguyen_lieu', [])):
                            mon_mot_phan.append(f"üëâ {ten_mon.title()} (c√≥ {nl})")
                            break
                
                if mon_mot_phan:
                    ai_reply = "üçΩ Kh√¥ng t√¨m th·∫•y m√≥n v·ªõi t·∫•t c·∫£ nguy√™n li·ªáu, nh∆∞ng b·∫°n c√≥ th·ªÉ th·ª≠:\n" + "\n".join(mon_mot_phan[:5])
                else:
                    # N·∫øu kh√¥ng t√¨m th·∫•y m√≥n ph√π h·ª£p
                    ai_reply = "‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ph√π h·ª£p v·ªõi nguy√™n li·ªáu b·∫°n ƒë∆∞a ra.\n\n"
                    ai_reply += "ü§ñ G·ª£i √Ω th√™m t·ª´ AI:\n"
                    
                    # G·ª£i √Ω c∆° b·∫£n
                    if any("g√†" in nl.lower() for nl in nguyen_lieu):
                        ai_reply += "1. G√† lu·ªôc\n2. G√† x√†o s·∫£ ·ªõt\n3. S√∫p g√†\n"
                    elif any("n·∫•m" in nl.lower() for nl in nguyen_lieu):
                        ai_reply += "1. N·∫•m x√†o t·ªèi\n2. Canh n·∫•m\n3. N·∫•m kho ti√™u\n"
                    else:
                        ai_reply += "1. M√≥n h·∫•p\n2. M√≥n x√†o\n3. M√≥n lu·ªôc\n"
            
            await update.message.reply_text(ai_reply)
        else:
            await update.message.reply_text("Vui l√≤ng cho t√¥i bi·∫øt b·∫°n c√≥ nh·ªØng nguy√™n li·ªáu n√†o? (v√≠ d·ª•: th·ªãt g√†, rau mu·ªëng)")
        return
        # C·∫£i ti·∫øn ch·ª©c nƒÉng g·ª£i √Ω m√≥n ƒÉn v·ªõi k-NN
    elif intent == "cong_thuc":
        if "c√°ch l√†m m√≥n" in user_message:
            ten_mon = user_message.replace("c√°ch l√†m m√≥n", "").strip()
            ai_reply = lay_cong_thuc_mon_an(ten_mon)
            
            # --- PH·∫¶N M·ªöI: G·ª£i √Ω m√≥n t∆∞∆°ng t·ª± ---
            if food_recommender.is_trained:
                similar_foods = food_recommender.recommend_similar(ten_mon, n=2)
                if similar_foods:
                    ai_reply += "\n\nüëâ B·∫°n c≈©ng c√≥ th·ªÉ th√≠ch:\n"
                    for similar in similar_foods:
                        ai_reply += f"- {similar.title()}\n"
            
            await update.message.reply_text(ai_reply)
            return
    
    # Gi·ªØ l·∫°i logic x·ª≠ l√Ω c≈© cho c√°c intent kh√°c
    if "t√≠nh ch·ªâ s·ªë" in user_message or intent == "chi_so_suc_khoe":
        thong_tin = parse_user_input(user_message)
        await xu_ly_chi_so(thong_tin, update, context)
        return

    if "mu·ªën gi·∫£m c√¢n" in user_message or (intent == "tang_giam_can" and "gi·∫£m" in user_message):
        await xu_ly_muc_tieu_can_nang("giam_can", context, update)
        return

    elif "mu·ªën tƒÉng c√¢n" in user_message or (intent == "tang_giam_can" and "tƒÉng" in user_message):
        await xu_ly_muc_tieu_can_nang("tang_can", context, update)
        return

    if "th·ª±c ƒë∆°n gi·∫£m c√¢n trong ng√†y" in user_message or (intent == "thuc_don" and "gi·∫£m" in user_message and "ng√†y" in user_message):
        context.user_data["che_do"] = "giam_can"
        context.user_data["loai_thuc_don"] = "trong_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_giam_can_trong_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    elif "th·ª±c ƒë∆°n gi·∫£m c√¢n trong 7 ng√†y" in user_message or (intent == "thuc_don" and "gi·∫£m" in user_message and "7" in user_message):
        context.user_data["che_do"] = "giam_can"
        context.user_data["loai_thuc_don"] = "7_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_giam_can_7_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    elif "th·ª±c ƒë∆°n tƒÉng c√¢n trong ng√†y" in user_message or (intent == "thuc_don" and "tƒÉng" in user_message and "ng√†y" in user_message):
        context.user_data["che_do"] = "tang_can"
        context.user_data["loai_thuc_don"] = "trong_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_tang_can_trong_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    elif "th·ª±c ƒë∆°n tƒÉng c√¢n trong 7 ng√†y" in user_message or (intent == "thuc_don" and "tƒÉng" in user_message and "7" in user_message):
        context.user_data["che_do"] = "tang_can"
        context.user_data["loai_thuc_don"] = "7_ngay"
        mon_khong_thich = context.user_data.get("mon_khong_thich", [])
        thuc_don = tao_thuc_don_tang_can_7_ngay(mon_khong_thich)
        await update.message.reply_text(thuc_don)
        return

    if "kh√¥ng mu·ªën ƒÉn" in user_message or (intent == "thiet_lap" and ("kh√¥ng" in user_message and "ƒÉn" in user_message)):
        await xu_ly_mon_khong_thich(user_message, context, update,
                                    mon_an_giam_can, mon_an_tang_can)
        return

    if "mu·ªën ƒÉn l·∫°i" in user_message or (intent == "thiet_lap" and "l·∫°i" in user_message):
        await khoi_phuc_mon_an_lai(user_message, context, update.message.reply_text)
        return

    if "danh s√°ch m√≥n kh√¥ng th√≠ch" in user_message or (intent == "thiet_lap" and "danh s√°ch" in user_message):
        await hien_thi_danh_sach_mon_khong_thich(context, update.message.reply_text)
        return
        
    # --- PH·∫¶N M·ªöI: Ch·ª©c nƒÉng g·ª£i √Ω m√≥n t∆∞∆°ng t·ª± ---
    if ("m√≥n t∆∞∆°ng t·ª±" in user_message or "m√≥n gi·ªëng" in user_message or "m√≥n nh∆∞" in user_message) and food_recommender.is_trained:
        print(f"DEBUG: chay vao day")
        try:
            # Tr√≠ch xu·∫•t t√™n m√≥n t·ª´ tin nh·∫Øn
            ten_mon = user_message.replace("m√≥n t∆∞∆°ng t·ª±", "").replace("m√≥n gi·ªëng", "").replace("m√≥n nh∆∞", "").strip()
            print(f"DEBUG: T√¨m m√≥n t∆∞∆°ng t·ª± v·ªõi '{ten_mon}'")
            
            # Ki·ªÉm tra xem t√™n m√≥n c√≥ trong danh s√°ch kh√¥ng
            if not ten_mon:
                await update.message.reply_text("Vui l√≤ng cho bi·∫øt t√™n m√≥n b·∫°n mu·ªën t√¨m m√≥n t∆∞∆°ng t·ª±? V√≠ d·ª•: m√≥n t∆∞∆°ng t·ª± c∆°m g√†")
                return
                
            similar_foods = food_recommender.recommend_similar(ten_mon, n=5)
            
            if similar_foods:
                reply = f"üç≤ M√≥n ƒÉn t∆∞∆°ng t·ª± v·ªõi {ten_mon}:\n\n"
                for i, food in enumerate(similar_foods, 1):
                    reply += f"{i}. {food.title()}\n"
                await update.message.reply_text(reply)
            else:
                await update.message.reply_text(f"‚ùå Kh√¥ng t√¨m th·∫•y m√≥n t∆∞∆°ng t·ª± v·ªõi {ten_mon}. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n m√≥n.")
            return
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi t√¨m m√≥n t∆∞∆°ng t·ª±: {str(e)}")
            return

    # D√πng Ollama cho c√°c tr∆∞·ªùng h·ª£p kh√°c
    context.user_data.setdefault('history', [])
    context.user_data['history'].append(user_message)
    recent_history = context.user_data['history'][-5:]
    prompt = "\n".join(recent_history)
    ai_reply = await asyncio.to_thread(hoi_ollama, prompt)
    await update.message.reply_text(ai_reply)

# Th√™m l·ªánh hu·∫•n luy·ªán m√¥ h√¨nh
async def huan_luyen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """L·ªánh ƒë·ªÉ hu·∫•n luy·ªán l·∫°i c√°c m√¥ h√¨nh AI"""
    await update.message.reply_text("üîÑ ƒêang hu·∫•n luy·ªán l·∫°i c√°c m√¥ h√¨nh AI...")
    
    try:
        # Import train_models v√† ch·∫°y hu·∫•n luy·ªán
        from train_models import train_message_classifier, train_food_recommender
        
        # Ch·∫°y hu·∫•n luy·ªán b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng ch·∫∑n bot
        await asyncio.to_thread(train_message_classifier)
        await asyncio.to_thread(train_food_recommender)
        
        # T·∫£i l·∫°i c√°c m√¥ h√¨nh
        message_classifier.load()
        food_recommender.load()
        
        await update.message.reply_text("‚úÖ Hu·∫•n luy·ªán th√†nh c√¥ng! C√°c m√¥ h√¨nh AI ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói khi hu·∫•n luy·ªán m√¥ h√¨nh: {str(e)}")

# L·ªánh reset models v√† kh·ªüi t·∫°o l·∫°i
async def reset_models(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """L·ªánh ƒë·ªÉ x√≥a v√† hu·∫•n luy·ªán l·∫°i c√°c m√¥ h√¨nh AI t·ª´ ƒë·∫ßu"""
    await update.message.reply_text("üîÑ ƒêang x√≥a v√† hu·∫•n luy·ªán l·∫°i c√°c m√¥ h√¨nh AI...")
    
    try:
        # X√≥a c√°c file model c≈©
        model_files = ["models/message_classifier.pkl", "models/food_recommender.pkl"]
        for file in model_files:
            if os.path.exists(file):
                os.remove(file)
                print(f"ƒê√£ x√≥a {file}")
        
        # Import train_models v√† ch·∫°y hu·∫•n luy·ªán
        from train_models import train_message_classifier, train_food_recommender
        
        # Ch·∫°y hu·∫•n luy·ªán b·∫•t ƒë·ªìng b·ªô
        await asyncio.to_thread(train_message_classifier)
        await asyncio.to_thread(train_food_recommender)
        
        # T·∫£i l·∫°i c√°c m√¥ h√¨nh
        global message_classifier, food_recommender
        message_classifier = MessageClassifier()
        message_classifier.load()
        food_recommender = FoodRecommender()
        food_recommender.load()
        
        await update.message.reply_text("‚úÖ Kh·ªüi t·∫°o l·∫°i th√†nh c√¥ng! C√°c m√¥ h√¨nh AI ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói khi kh·ªüi t·∫°o l·∫°i m√¥ h√¨nh: {str(e)}")

# Th√™m h√†m debug
async def debug_thuc_don_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """L·ªánh ƒë·ªÉ ki·ªÉm tra th√¥ng tin th·ª±c ƒë∆°n"""
    # In ra th∆∞ m·ª•c l√†m vi·ªác hi·ªán t·∫°i
    cwd = os.getcwd()
    debug_info = f"Th∆∞ m·ª•c hi·ªán t·∫°i: {cwd}\n\n"
    
    # Th·ª≠ m·ªü file thuc_don.json
    try:
        with open('thuc_don.json', 'r', encoding='utf-8') as f:
            thuc_don = json.load(f)
            debug_info += f"‚úÖ ƒê·ªçc th√†nh c√¥ng file thuc_don.json!\n"
            debug_info += f"S·ªë l∆∞·ª£ng m√≥n: {len(thuc_don)}\n\n"
            
            # Ki·ªÉm tra m·ªôt s·ªë m√≥n c·ª• th·ªÉ
            for mon in ["g√† x√†o n·∫•m", "s√∫p g√† n·∫•m", "rau mu·ªëng x√†o t·ªèi"]:
                if mon in thuc_don:
                    debug_info += f"- C√≥ m√≥n: {mon}\n"
                    # Hi·ªán m·ªôt s·ªë nguy√™n li·ªáu
                    nguyen_lieu = thuc_don[mon].get("nguyen_lieu", [])
                    if nguyen_lieu:
                        debug_info += f"  Nguy√™n li·ªáu: {', '.join(nguyen_lieu[:3])}...\n"
                else:
                    debug_info += f"- Kh√¥ng c√≥ m√≥n: {mon}\n"
            
            # Ki·ªÉm tra c√°c m√≥n c√≥ nguy√™n li·ªáu th·ªãt g√† v√† n·∫•m
            debug_info += "\nT√¨m m√≥n v·ªõi th·ªãt g√† v√† n·∫•m:\n"
            count = 0
            for ten_mon, chi_tiet in thuc_don.items():
                nguyen_lieu = " ".join(str(item).lower() for item in chi_tiet.get("nguyen_lieu", [])).lower()
                if "th·ªãt g√†" in nguyen_lieu and ("n·∫•m" in nguyen_lieu or "n·∫•m h∆∞∆°ng" in nguyen_lieu):
                    debug_info += f"- {ten_mon}\n"
                    count += 1
            
            if count == 0:
                debug_info += "Kh√¥ng t√¨m th·∫•y m√≥n n√†o ph√π h·ª£p!\n"
    
    except FileNotFoundError:
        debug_info += "\n‚ùå Kh√¥ng t√¨m th·∫•y file thuc_don.json trong th∆∞ m·ª•c hi·ªán t·∫°i\n"
        
        # Th·ª≠ t√¨m trong th∆∞ m·ª•c code
        try:
            with open('code/thuc_don.json', 'r', encoding='utf-8') as f:
                thuc_don = json.load(f)
                debug_info += f"\n‚úÖ ƒê·ªçc th√†nh c√¥ng file code/thuc_don.json!\n"
                debug_info += f"S·ªë l∆∞·ª£ng m√≥n: {len(thuc_don)}\n"
        except FileNotFoundError:
            debug_info += "\n‚ùå Kh√¥ng t√¨m th·∫•y file code/thuc_don.json\n"
    
    except json.JSONDecodeError:
        debug_info += "\n‚ùå L·ªói c√∫ ph√°p trong file thuc_don.json\n"
    
    await update.message.reply_text(debug_info)

# Token t·ª´ BotFather
TOKEN = '7433569751:AAGPj8iRnKUiHi6Z5f6FNyyOhRyxqk3DbZc'
#TOKEN = '7964158551:AAEN2Z9m6KNpK7DCQmVZtRPgbmVdGYQUt-I'

# Kh·ªüi t·∫°o bot v√† ch·∫°y
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    
    # T·∫£i c√°c m√¥ h√¨nh AI n·∫øu c√≥
    try:
        message_classifier.load()
        print("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh ph√¢n lo·∫°i tin nh·∫Øn")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh ph√¢n lo·∫°i tin nh·∫Øn: {e}")
    
    try:
        food_recommender.load()
        print("‚úÖ ƒê√£ t·∫£i m√¥ h√¨nh g·ª£i √Ω m√≥n ƒÉn")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh g·ª£i √Ω m√≥n ƒÉn: {e}")
    
    # Th√™m handlers
    app.add_handler(CommandHandler("start", bat_dau))
    app.add_handler(CommandHandler("huanluyen", huan_luyen))
    app.add_handler(CommandHandler("resetmodels", reset_models))
    app.add_handler(CommandHandler("debug", debug_thuc_don_cmd))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), tra_loi))
    
    print("ü§ñ Bot ƒëang ch·∫°y v·ªõi c√°c m√¥ h√¨nh AI...")
    app.run_polling()